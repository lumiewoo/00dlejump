class MusicalDoodleJump{constructor(){this.canvas=document.getElementById("gameCanvas"),this.ctx=this.canvas.getContext("2d"),this.statusElement=document.getElementById("status"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,window.addEventListener("resize",()=>{this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}),this.player={x:window.innerWidth/2,y:window.innerHeight-100,width:38,height:38,vx:0,vy:0,onGround:!1,isMoving:!1},this.gender=localStorage.getItem("gender")||"M",this.emojis={M:{standing:"üßç‚Äç‚ôÇÔ∏è",running:"üèÉ‚Äç‚ôÇÔ∏è"},F:{standing:"üßç‚Äç‚ôÄÔ∏è",running:"üèÉ‚Äç‚ôÄÔ∏è"},NB:{standing:"üßç",running:"üèÉ"}},this.platforms=[],this.gravity=.3,this.jumpHeights=[-6,-8,-10,-12],this.moveSpeed=3,this.cameraY=0,this.isPaused=!1,this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.musicBuffer=[],this.gameStartTime=performance.now(),this.selectedKey="C",this.selectedScale="major",this.octaveRange=2;const t=["sine","piano","supersaw","pad","brass","flute"];this.selectedSound=t[Math.floor(Math.random()*t.length)],this.selectedMode="single",this.arpEnabled=!1,this.arpType="up",this.randomizeArpType=!1,this.randomizeRhythm=!1,this.arpChance=100,this.arpLength=.25,this.fallingThrough=!1,this.volumeLevels=[.25,.5,.75,1],this.arpTypes=["up","down","updown","downup","random","chord"],this.rhythmPatterns=[40,60,80,100,120,150],this.noteColors={},this.recentHits=[],this.isMobile=this.detectMobile(),this.touchStartX=0,this.touchStartY=0,this.isMoving=!1,this.lastTapTime=0,this.tapCount=0,this.scales={major:[0,2,4,5,7,9,11,12],minor:[0,2,3,5,7,8,10,12],pentatonic:[0,2,4,7,9,12],blues:[0,3,5,6,7,10,12],chromatic:[0,1,2,3,4,5,6,7,8,9,10,11,12]},this.keyOffsets={C:0,"C#":1,D:2,"D#":3,E:4,F:5,"F#":6,G:7,"G#":8,A:9,"A#":10,B:11},this.updateNotesForScale(),this.setupControls(),this.setupGenderSelector(),this.initializePlatforms(),this.bindEvents(),this.setupMobileUI(),this.gameLoop()}updateNotesForScale(){const t=60+this.keyOffsets[this.selectedKey],e=this.scales[this.selectedScale];this.notes=[],this.noteFrequencies={},this.noteColors={};for(let i=0;i<this.octaveRange;i++)for(let s=0;s<e.length;s++){const n=t+e[s]+12*i,o=this.midiToNoteName(n),a=440*Math.pow(2,(n-69)/12);this.notes.push(o),this.noteFrequencies[o]=a,this.noteColors[o]="#ffffff"}}midiToNoteName(t){const e=Math.floor(t/12)-1;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][t%12]+e}noteNameToMIDI(t){const e=t.match(/^([A-G]#?)(-?\d+)$/);if(!e)return null;const i=e[1],s=parseInt(e[2]),n=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"].indexOf(i);return-1===n?null:12*(s+1)+n}setupControls(){document.getElementById("soundSelect").value=this.selectedSound,document.getElementById("keySelect").addEventListener("change",t=>{this.selectedKey=t.target.value,this.updateNotesForScale(),this.updatePlatformLabels()}),document.getElementById("scaleSelect").addEventListener("change",t=>{this.selectedScale=t.target.value,this.updateNotesForScale(),this.updatePlatformLabels()}),document.getElementById("octaveRangeSelect").addEventListener("change",t=>{this.octaveRange=parseInt(t.target.value),this.updateNotesForScale(),this.updatePlatformLabels()}),document.getElementById("soundSelect").addEventListener("change",t=>{this.selectedSound=t.target.value}),document.getElementById("modeSelect").addEventListener("change",t=>{this.selectedMode=t.target.value}),document.getElementById("arpCheckbox").addEventListener("change",t=>{this.arpEnabled=t.target.checked,this.updateArpControls()}),document.getElementById("arpTypeSelect").addEventListener("change",t=>{this.arpType=t.target.value}),document.getElementById("randomizeArpTypeCheckbox").addEventListener("change",t=>{this.randomizeArpType=t.target.checked}),document.getElementById("randomizeRhythmCheckbox").addEventListener("change",t=>{this.randomizeRhythm=t.target.checked}),document.getElementById("arpChanceSlider").addEventListener("input",t=>{this.arpChance=parseInt(t.target.value),document.getElementById("arpChanceValue").textContent=this.arpChance+"%"}),document.getElementById("arpLengthSelect").addEventListener("change",t=>{this.arpLength=parseFloat(t.target.value)})}updateArpControls(){const t=this.arpEnabled;document.getElementById("arpTypeSelect").disabled=!t,document.getElementById("randomizeArpTypeCheckbox").disabled=!t,document.getElementById("randomizeRhythmCheckbox").disabled=!t,document.getElementById("arpChanceSlider").disabled=!t,document.getElementById("arpLengthSelect").disabled=!t}updatePlatformLabels(){for(let t of this.platforms)t.note=this.notes[Math.floor(Math.random()*this.notes.length)],t.color=this.noteColors[t.note]}initializePlatforms(){const t=Math.floor(this.canvas.width/120),e=this.canvas.width/t,i=Math.ceil(this.canvas.height/40)+10;let s=null;for(let n=-5;n<i;n++)for(let i=0;i<t;i++){if(Math.random()>.2)continue;const t=30*(Math.random()-.5),o=10*(Math.random()-.5);let a;do{a=this.notes[Math.floor(Math.random()*this.notes.length)]}while(a===s&&this.notes.length>1);this.platforms.push({x:i*e+t+10,y:40*n+o,width:60,height:10,note:a,color:this.noteColors[a],hit:!1}),s=a}}detectMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setupMobileUI(){this.isMobile&&(document.querySelector(".desktop-controls").style.display="none",document.querySelector(".mobile-controls").style.display="block",document.getElementById("controls").style.fontSize="10px")}setupGenderSelector(){document.querySelectorAll("#genderSelector button").forEach(t=>{t.classList.remove("active")}),document.getElementById(`gender${this.gender}`).classList.add("active"),document.getElementById("genderM").addEventListener("click",()=>{this.setGender("M")}),document.getElementById("genderF").addEventListener("click",()=>{this.setGender("F")}),document.getElementById("genderNB").addEventListener("click",()=>{this.setGender("NB")})}setGender(t){this.gender=t,localStorage.setItem("gender",t),document.querySelectorAll("#genderSelector button").forEach(t=>{t.classList.remove("active")}),document.getElementById(`gender${t}`).classList.add("active")}bindEvents(){this.keys={},window.addEventListener("keydown",t=>{if(this.keys[t.code]=!0,"Space"===t.code&&(t.preventDefault(),this.togglePause()),"Enter"===t.code&&(t.preventDefault(),this.exportMIDI()),"ArrowUp"===t.code){t.preventDefault();const e=Math.min(...this.jumpHeights);this.player.vy=1.2*e}"ArrowDown"===t.code&&(t.preventDefault(),this.fallingThrough=!0)}),window.addEventListener("keyup",t=>{this.keys[t.code]=!1,"ArrowDown"===t.code&&(this.fallingThrough=!1)}),this.canvas.addEventListener("touchstart",t=>{t.preventDefault();const e=t.touches[0];this.touchStartX=e.clientX,this.touchStartY=e.clientY,this.isMoving=!0;const i=Date.now();i-this.lastTapTime<300?(this.tapCount++,1===this.tapCount?this.togglePause():2===this.tapCount&&(this.exportMIDI(),this.tapCount=0)):this.tapCount=1,this.lastTapTime=i}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),!this.isMoving)return;const e=t.touches[0].clientX-this.touchStartX;this.player.vx=Math.max(-this.moveSpeed,Math.min(this.moveSpeed,.1*e)),Math.abs(this.player.vx)>.5&&(this.player.isMoving=!0)}),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),this.isMoving=!1,this.player.vx*=.8,this.player.isMoving=!1}),this.canvas.addEventListener("contextmenu",t=>{t.preventDefault()})}togglePause(){this.isPaused=!this.isPaused,this.statusElement.textContent=this.isPaused?"Status: Paused":"Status: Playing",this.isPaused?this.audioContext.suspend():this.audioContext.resume()}trackNoteHit(t){this.recentHits=this.recentHits.filter(e=>e!==t),this.recentHits.unshift(t),this.recentHits.length>3&&(this.recentHits=this.recentHits.slice(0,3)),this.updateNoteColors()}updateNoteColors(){for(let t of this.notes)this.noteColors[t]="#ffffff";this.recentHits.length>0&&(this.noteColors[this.recentHits[0]]="#ff1493"),this.recentHits.length>1&&(this.noteColors[this.recentHits[1]]="#ff69b4"),this.recentHits.length>2&&(this.noteColors[this.recentHits[2]]="#ffb6c1");for(let t of this.platforms)t.color=this.noteColors[t.note]}playNote(t){const e=this.volumeLevels[Math.floor(Math.random()*this.volumeLevels.length)];if(this.arpEnabled&&100*Math.random()<this.arpChance)this.playArpeggio(t,e);else if("chord"===this.selectedMode)this.playChord(t,e);else{this.playSingleNote(t,e);const i=performance.now();this.recordNote(t,i,e,.25)}}playSingleNote(t,e=1){const i=this.noteFrequencies[t];"piano"===this.selectedSound?this.playPiano(i,.3*e):"supersaw"===this.selectedSound?this.playSupersaw(i,.3*e):"pad"===this.selectedSound?this.playPad(i,.2*e):"brass"===this.selectedSound?this.playBrass(i,.3*e):"flute"===this.selectedSound?this.playFlute(i,.3*e):this.playSine(i,.3*e)}playChord(t,e=1){const i=this.notes.indexOf(t);if(-1===i)return;const s=[],n=performance.now();s.push(this.notes[i]),i+2<this.notes.length&&s.push(this.notes[i+2]),i+4<this.notes.length&&s.push(this.notes[i+4]),console.log("Playing chord with notes:",s);for(let t of s){if(!t)continue;const i=this.noteFrequencies[t],s=.2*e;this.recordNote(t,n,s,.25),console.log("Recorded chord note:",t,"velocity:",s),"piano"===this.selectedSound?this.playPiano(i,s):"supersaw"===this.selectedSound?this.playSupersaw(i,.75*s):"pad"===this.selectedSound?this.playPad(i,s):"brass"===this.selectedSound?this.playBrass(i,s):"flute"===this.selectedSound?this.playFlute(i,s):this.playSine(i,s)}}playArpeggio(t,e=1){const i=this.notes.indexOf(t);let s=[];performance.now();const n=[this.notes[i]];this.notes[i+2]&&n.push(this.notes[i+2]),this.notes[i+4]&&n.push(this.notes[i+4]),(this.notes[i+7]||this.notes[0])&&n.push(this.notes[i+7]||this.notes[0]);let o=this.arpType;switch(this.randomizeArpType&&(o=this.arpTypes[Math.floor(Math.random()*this.arpTypes.length)]),o){case"up":case"chord":default:s=[...n];break;case"down":s=[...n].reverse();break;case"updown":s=[...n,...n.slice(1).reverse()];break;case"downup":s=[...n].reverse(),s=[...s,...s.slice(1).reverse()];break;case"random":s=[...n];for(let t=s.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1));[s[t],s[e]]=[s[e],s[t]]}}let a=60;this.randomizeRhythm&&(a=this.rhythmPatterns[Math.floor(Math.random()*this.rhythmPatterns.length)]),console.log("Playing arpeggio:",o,"with notes:",s,"speed:",a),s.forEach((t,i)=>{setTimeout(()=>{const i=this.noteFrequencies[t],s=.25*e,n=performance.now();this.recordNote(t,n,s,this.arpLength),"piano"===this.selectedSound?this.playPiano(i,s):"supersaw"===this.selectedSound?this.playSupersaw(i,s):"pad"===this.selectedSound?this.playPad(i,.6*s):"brass"===this.selectedSound?this.playBrass(i,s):"flute"===this.selectedSound?this.playFlute(i,s):this.playSine(i,s)},i*a)})}playSine(t,e=.3){const i=this.audioContext.createOscillator(),s=this.audioContext.createGain();i.type="sine",i.frequency.setValueAtTime(t,this.audioContext.currentTime),s.gain.setValueAtTime(e,this.audioContext.currentTime),s.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.5),i.connect(s),s.connect(this.audioContext.destination),i.start(),i.stop(this.audioContext.currentTime+.5)}playPiano(t,e=.3){const i=this.audioContext.createOscillator(),s=this.audioContext.createOscillator(),n=this.audioContext.createGain();i.type="triangle",i.frequency.setValueAtTime(t,this.audioContext.currentTime),s.type="sine",s.frequency.setValueAtTime(2*t,this.audioContext.currentTime);const o=this.audioContext.createGain();o.gain.value=.3,n.gain.setValueAtTime(0,this.audioContext.currentTime),n.gain.linearRampToValueAtTime(e,this.audioContext.currentTime+.01),n.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+1.5),i.connect(n),s.connect(o),o.connect(n),n.connect(this.audioContext.destination),i.start(),s.start(),i.stop(this.audioContext.currentTime+1.5),s.stop(this.audioContext.currentTime+1.5)}playSupersaw(t,e=.3){const i=this.audioContext.createGain();for(let e=0;e<7;e++){const s=this.audioContext.createOscillator();s.type="sawtooth",s.frequency.setValueAtTime(t,this.audioContext.currentTime),s.detune.setValueAtTime(10*(e-3.5),this.audioContext.currentTime);const n=this.audioContext.createGain();n.gain.value=1/7,s.connect(n),n.connect(i),s.start(),s.stop(this.audioContext.currentTime+.8)}i.gain.setValueAtTime(e,this.audioContext.currentTime),i.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.8),i.connect(this.audioContext.destination)}playPad(t,e=.2){const i=this.audioContext.createOscillator(),s=this.audioContext.createOscillator(),n=this.audioContext.createBiquadFilter(),o=this.audioContext.createGain();i.type="sawtooth",i.frequency.setValueAtTime(t,this.audioContext.currentTime),s.type="triangle",s.frequency.setValueAtTime(1.01*t,this.audioContext.currentTime),n.type="lowpass",n.frequency.setValueAtTime(800,this.audioContext.currentTime),n.frequency.exponentialRampToValueAtTime(400,this.audioContext.currentTime+2),n.Q.value=2,o.gain.setValueAtTime(0,this.audioContext.currentTime),o.gain.linearRampToValueAtTime(e,this.audioContext.currentTime+.3),o.gain.setValueAtTime(e,this.audioContext.currentTime+1.5),o.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+3),i.connect(n),s.connect(n),n.connect(o),o.connect(this.audioContext.destination),i.start(),s.start(),i.stop(this.audioContext.currentTime+3),s.stop(this.audioContext.currentTime+3)}playBrass(t,e=.3){const i=this.audioContext.createOscillator(),s=this.audioContext.createOscillator(),n=this.audioContext.createOscillator(),o=this.audioContext.createBiquadFilter(),a=this.audioContext.createGain();i.type="sawtooth",i.frequency.setValueAtTime(t,this.audioContext.currentTime),s.type="sawtooth",s.frequency.setValueAtTime(.99*t,this.audioContext.currentTime),n.type="square",n.frequency.setValueAtTime(2*t,this.audioContext.currentTime);const h=this.audioContext.createGain();h.gain.value=.1,o.type="lowpass",o.frequency.setValueAtTime(3*t,this.audioContext.currentTime),o.frequency.exponentialRampToValueAtTime(6*t,this.audioContext.currentTime+.05),o.frequency.exponentialRampToValueAtTime(2*t,this.audioContext.currentTime+.3),o.Q.value=5,a.gain.setValueAtTime(0,this.audioContext.currentTime),a.gain.linearRampToValueAtTime(e,this.audioContext.currentTime+.05),a.gain.exponentialRampToValueAtTime(.7*e,this.audioContext.currentTime+.1),a.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.8),i.connect(o),s.connect(o),n.connect(h),h.connect(o),o.connect(a),a.connect(this.audioContext.destination),i.start(),s.start(),n.start(),i.stop(this.audioContext.currentTime+.8),s.stop(this.audioContext.currentTime+.8),n.stop(this.audioContext.currentTime+.8)}playFlute(t,e=.3){const i=this.audioContext.createOscillator(),s=this.audioContext.createOscillator(),n=this.audioContext.createBiquadFilter(),o=this.audioContext.createGain(),a=this.audioContext.createGain();i.type="triangle",i.frequency.setValueAtTime(t,this.audioContext.currentTime),s.type="sawtooth",s.frequency.setValueAtTime(8*t,this.audioContext.currentTime),a.gain.value=.02,n.type="bandpass",n.frequency.setValueAtTime(t,this.audioContext.currentTime),n.Q.value=2,o.gain.setValueAtTime(0,this.audioContext.currentTime),o.gain.linearRampToValueAtTime(.3*e,this.audioContext.currentTime+.02),o.gain.linearRampToValueAtTime(e,this.audioContext.currentTime+.1),o.gain.setValueAtTime(e,this.audioContext.currentTime+.3),o.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.6),i.connect(n),s.connect(a),a.connect(n),n.connect(o),o.connect(this.audioContext.destination),i.start(),s.start(),i.stop(this.audioContext.currentTime+.6),s.stop(this.audioContext.currentTime+.6)}recordNote(t,e,i=.5,s=.25){const n=(e-this.gameStartTime)/1e3;this.musicBuffer.push({note:t,time:n,timestamp:e,velocity:Math.round(127*i),duration:s})}update(){if(!this.isPaused){this.player.isMoving=!1,this.keys.ArrowLeft?(this.player.vx=-this.moveSpeed,this.player.isMoving=!0):this.keys.ArrowRight?(this.player.vx=this.moveSpeed,this.player.isMoving=!0):this.player.vx*=.8,Math.abs(this.player.vx)>.5&&(this.player.isMoving=!0),this.player.vy+=this.gravity,this.player.x+=this.player.vx,this.player.y+=this.player.vy,this.player.x<0&&(this.player.x=0),this.player.x+this.player.width>this.canvas.width&&(this.player.x=this.canvas.width-this.player.width),this.player.onGround=!1;for(let t of this.platforms)if(this.player.vy>0&&!this.fallingThrough&&this.player.x+this.player.width>t.x&&this.player.x<t.x+t.width&&this.player.y+this.player.height>t.y&&this.player.y+this.player.height<t.y+t.height+10){this.player.y=t.y-this.player.height;const e=this.jumpHeights[Math.floor(Math.random()*this.jumpHeights.length)];this.player.vy=e,this.player.onGround=!0,t.hit||(t.hit=!0,this.playNote(t.note),this.trackNoteHit(t.note),setTimeout(()=>t.hit=!1,200))}if(this.generateMorePlatforms(),this.player.y>this.canvas.height-this.player.height){this.player.y=this.canvas.height-this.player.height;const t=Math.min(...this.jumpHeights);this.player.vy=1.5*t}}}generateMorePlatforms(){const t=Math.min(...this.platforms.map(t=>t.y)),e=Math.max(...this.platforms.map(t=>t.y)),i=Math.floor(this.canvas.width/120),s=this.canvas.width/i;if(t>-200){let e=null;for(let n=0;n<10;n++)for(let o=0;o<i;o++){if(Math.random()>.2)continue;const i=30*(Math.random()-.5),a=10*(Math.random()-.5);let h;do{h=this.notes[Math.floor(Math.random()*this.notes.length)]}while(h===e&&this.notes.length>1);this.platforms.push({x:o*s+i+10,y:t-40*(n+1)+a,width:60,height:10,note:h,color:this.noteColors[h],hit:!1}),e=h}}if(e<this.canvas.height+200){let t=null;for(let n=0;n<10;n++)for(let o=0;o<i;o++){if(Math.random()>.2)continue;const i=30*(Math.random()-.5),a=10*(Math.random()-.5);let h;do{h=this.notes[Math.floor(Math.random()*this.notes.length)]}while(h===t&&this.notes.length>1);this.platforms.push({x:o*s+i+10,y:e+40*(n+1)+a,width:60,height:10,note:h,color:this.noteColors[h],hit:!1}),t=h}}this.platforms=this.platforms.filter(t=>t.y>-500&&t.y<this.canvas.height+500)}resetGame(){this.player.x=this.canvas.width/2,this.player.y=this.canvas.height-100,this.player.vx=0,this.player.vy=0,this.cameraY=0,this.platforms=[],this.initializePlatforms(),this.gameStartTime=performance.now(),this.musicBuffer=[]}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.save(),this.ctx.font="38px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle";const t=this.player.isMoving?this.emojis[this.gender].running:this.emojis[this.gender].standing;this.player.vx>.5?(this.ctx.translate(this.player.x+this.player.width/2,this.player.y+this.player.height/2),this.ctx.scale(-1,1),this.ctx.fillText(t,0,0)):this.ctx.fillText(t,this.player.x+this.player.width/2,this.player.y+this.player.height/2),this.ctx.restore();const e=.1*this.canvas.height,i=.9*this.canvas.height;for(let t of this.platforms)t.y<e||t.y>i||(this.ctx.fillStyle=t.color||"#4caf50",this.ctx.fillRect(t.x,t.y,t.width,t.height),this.ctx.strokeStyle="#000",this.ctx.lineWidth=1,this.ctx.strokeRect(t.x,t.y,t.width,t.height),this.ctx.fillStyle="#000",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.fillText(t.note,t.x+t.width/2,t.y-2));this.ctx.fillStyle="#333",this.ctx.font="16px Arial",this.ctx.textAlign="left",this.ctx.fillText(`Height: ${Math.max(0,Math.floor((500-this.player.y)/10))}m`,10,30),this.ctx.fillText(`Buffer: ${this.musicBuffer.length} notes`,10,50)}exportMIDI(){if(0===this.musicBuffer.length)return void alert("No notes recorded yet!");console.log("Music buffer before export:",this.musicBuffer),console.log("Total notes in buffer:",this.musicBuffer.length);const t=this.createMIDIFile();this.downloadMIDI(t)}createMIDIFile(){const t=[];let e=[];for(let t of this.musicBuffer){const i=this.noteNameToMIDI(t.note);if(null===i)continue;const s=Math.floor(480*t.time*2),n=t.velocity||64,o=Math.floor(480*(t.duration||.25));e.push({time:s,type:"on",note:i,velocity:n}),e.push({time:s+o,type:"off",note:i,velocity:n})}e.sort((t,e)=>t.time-e.time);let i=[];i.push([0,255,88,4,4,2,24,8]),i.push([0,255,81,3,7,161,32]);let s=0;for(let t of e){const e=t.time-s;"on"===t.type?i.push([e,144,t.note,t.velocity]):i.push([e,128,t.note,t.velocity]),s=t.time}return i.push([0,255,47,0]),t.push(i),this.encodeMIDI(t,480)}encodeMIDI(t,e){let i=[77,84,104,100,0,0,0,6,0,1,t.length>>8&255,255&t.length,e>>8&255,255&e];for(let e of t){const t=[];for(let i of e){const e=this.encodeVariableLength(i[0]);t.push(...e),t.push(...i.slice(1))}const s=[77,84,114,107,t.length>>24&255,t.length>>16&255,t.length>>8&255,255&t.length];i.push(...s),i.push(...t)}return new Uint8Array(i)}encodeVariableLength(t){const e=[];let i=t;for(e.unshift(127&i),i>>=7;i>0;)e.unshift(127&i|128),i>>=7;return e}downloadMIDI(t){const e=new Blob([t],{type:"audio/midi"}),i=URL.createObjectURL(e),s=document.createElement("a");s.href=i,s.download=`musical_jump_${Date.now()}.mid`,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(i);const n=Math.round(this.musicBuffer[this.musicBuffer.length-1].time);alert(`MIDI file exported with ${this.musicBuffer.length} notes over ${n} seconds!`)}gameLoop(){this.update(),this.render(),requestAnimationFrame(()=>this.gameLoop())}}window.addEventListener("load",()=>{new MusicalDoodleJump});